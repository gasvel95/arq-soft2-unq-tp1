from abc import ABC, abstractmethod
from typing import Optional

from domain.product import Product

class ProductRepository(ABC):
    @abstractmethod
    def add(self, product: Product): ...
    @abstractmethod
    def get(self, id: str) -> Optional[Product]: ...
    @abstractmethod
    def delete(self, id: str): ...
    @abstractmethod
    def get_all(self) -> Optional[list[Product]]: ...
    @abstractmethod
    def update(self, product: Product): ...
    @abstractmethod
    def find_by_name(self, name: str): ...
    @abstractmethod
    def find_by_category(self, category: str): ...
    @abstractmethod
    def filter_by_price(self, min_price: float, max_price: float): ...